//continuous time 
//S. 1 station 1 team - boolean. various clocks for the team
//S. no call cause code - only call location
//A. Dispatch team or do nothing.
//1. simulate min of time of next call or next available time of team.
//2. calculate FC and FR correctly - accumulate over time steps

domain emergency_continuous_time_multiple_units_test{
	
	types {
		coordinate : object;
		unit : object; 
		cause : object;
		role : object;
		region : object;
	};
	
	pvariables {
		//state variables
		currentCallCode(cause) : {state-fluent, bool, default=false};
		currentCallTime : {state-fluent, real, default=0.0};
		currentCallRegion(region) : {state-fluent, bool, default=false};
		
		currentCall(coordinate) : {state-fluent, real, default=0};
		timeServiceDone(unit) : {state-fluent, real, default=0.0};
		timeTarryDone(unit) :  {state-fluent, real, default=0.0};
		timeBackInBase(unit) : {state-fluent, real, default=0.0};
		lastUnitService(unit,coordinate) : {state-fluent, real, default=0.0};

		
		
		tempUniformCause : {interm-fluent, real};
		tempUniformRegion : {interm-fluent, real};
		
		callMiles(unit) : {interm-fluent, real};
		callTravelTime(unit) : {interm-fluent, real};
		
		hospitalMiles : {interm-fluent, real};
		hospitalTravelTime : {interm-fluent, real};
		
		transferMiles : {interm-fluent, real};
		transferTravelTime : {interm-fluent, real};
		
		returnMiles(unit) : {interm-fluent, real};
		returnTravelTime(unit) : {interm-fluent, real}; 
		
		unitInService(unit) : {interm-fluent, bool};
		unitInBase(unit) : {interm-fluent, bool};
		unitOnSite(unit) : {interm-fluent, bool};
		
		//responseTime(unit) : {interm-fluent, real};
		firstResponse : {interm-fluent, real};
		fullResponse : {interm-fluent, real};
		overwhelm : {interm-fluent, bool};
		gapTime : {interm-fluent, real};
		
		//constants
		unitHome(unit,coordinate) : {non-fluent, real, default=0.0};
		
		MapUpperBound(coordinate) : {non-fluent, real, default=0};
		MapLowerBound(coordinate) : {non-fluent, real, default=0};
		
		BEFORE(cause,cause) : {non-fluent, bool, default=false};
		BEFORE_REGION(region,region) : {non-fluent, bool, default=false};
		
		HospitalPosition(coordinate) : {non-fluent, real, default=0.0};
		DestinationHospital(cause) : {non-fluent, bool, default=false};
		
		TransferPosition(coordinate) : {non-fluent, real, default=0.0};
		DestinationTransfer(cause) : {non-fluent, bool, default=false};
		
		RoleServiceTime(role) : {non-fluent, real, default=0.0};
		TarryTime(role) : {non-fluent, real, default=0.0};
		//FeetToMiles : {non-fluent, real, default=0.000189};
		MAX_INTER_ARRIVAL : {non-fluent, real, default=2.0};
		
		HasCapability(unit,role) : {non-fluent, bool, default=false};
		CauseRequirement(cause,region,role) : {non-fluent, int, default=0};
		
		//action
		dispatch(unit,role) : {action-fluent, bool, default=false};
		
		W1 : {non-fluent, real, default=1};
		W2 : {non-fluent, real, default=1};
		W3 : {non-fluent, real, default=10};
		W4 : {non-fluent, real, default=100};
	};
	
	cpfs {
	
		//unitHome'(?u,?c) = sum_{?s:station}[ if (rebase(?u,?s)) then StationLocation(?s,?c) else 0.0];
		
		//uniform distribution over causes
		tempUniformCause = Uniform(0,sum_{?c:cause}[1]);
		
		currentCallCode'(?c) = (tempUniformCause >= sum_{?d:cause}[BEFORE(?d,?c)]) ^ (tempUniformCause < 1+sum_{?d:cause}[BEFORE(?d,?c)]);
		
		//uniform distribution over region
		tempUniformRegion = Uniform(0,sum_{?r:region}[1]);
		
		currentCallRegion'(?r) = (tempUniformRegion >= sum_{?s:region}[BEFORE_REGION(?s,?r)]) 
									^ (tempUniformRegion < 1+sum_{?s:region}[BEFORE_REGION(?s,?r)]);
			 
		//sampledNextTime = currentCallTime + Uniform(0, MAX_INTER_ARRIVAL );
		
		gapTime = Uniform(0, MAX_INTER_ARRIVAL );
		currentCallTime' = currentCallTime + gapTime; 
		
		//if (sampledNextTime >= 24.0) then (sampledNextTime - 24.0) else sampledNextTime;
		//currentCallDay' = if (sampledNextTime >= 24.0) then (currentCallDay + 1) else currentCallDay;
					  
		currentCall'(?c) = Uniform( MapLowerBound(?c), MapUpperBound(?c) );//Normal( 0.5*CurrentCallTime )
		
		lastUnitService'(?u,?c) = if (exists_{?r:role}[dispatch(?u,?r)] ^ exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationHospital(?ca) ] ) 
								  then HospitalPosition(?c) 
								  else if (exists_{?r:role}[dispatch(?u,?r)] ^ exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationTransfer(?ca) ] )
								  then TransferPosition(?c) 
								  else if (exists_{?r:role}[dispatch(?u,?r)])
								  then currentCall(?c)
								  else if (unitInBase(?u))
								  then unitHome(?u,?c) 
								  else lastUnitService(?u,?c);
		
		callMiles(?u) = (if (unitInBase(?u)) 
						      then (sum_{?c:coordinate}[ abs[ unitHome(?u,?c)-currentCall(?c) ] ])
							  else (sum_{?c:coordinate}[ abs[ lastUnitService(?u,?c)-currentCall(?c) ] ]));
		
		callTravelTime(?u) = (if (callMiles(?u) <= 5) 
						 then callMiles(?u)/38.0
						 else if (callMiles(?u) > 5 ^ callMiles(?u) <= 7)
						 then callMiles(?u)/42.0
						 else if (callMiles(?u) > 7 ^ callMiles(?u) <= 12)
						 then callMiles(?u)/40.0
						 else if (callMiles(?u) > 12 ^ callMiles(?u) <= 15)
						 then callMiles(?u)/48.0
						 else if (callMiles(?u) > 15 ^ callMiles(?u) <= 17.5)
						 then callMiles(?u)/56.0
						 else if (callMiles(?u) > 17.5 ^ callMiles(?u) <= 20)
						 then callMiles(?u)/52.0
						 else if (callMiles(?u) > 20 ^ callMiles(?u) <= 25)
						 then callMiles(?u)/50.0
						 else if (callMiles(?u) > 25 ^ callMiles(?u) <= 28.5)
						 then callMiles(?u)/54.0
						 else if (callMiles(?u) > 28.5 ^ callMiles(?u) <= 41)
						 then callMiles(?u)/49.0
						 else if (callMiles(?u) > 41 ^ callMiles(?u) <= 70)
						 then callMiles(?u)/70.0
						 else if (callMiles(?u) > 70 ^ callMiles(?u) <= 500)
						 then callMiles(?u)/70.0
						 else callMiles(?u)/70.0);
						 
		hospitalMiles = if (exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationHospital(?ca) ] )
							then (sum_{?c:coordinate}[ abs[ currentCall(?c) - HospitalPosition(?c) ] ] )
							else 0.0;
							
		hospitalTravelTime = if (hospitalMiles <= 5) 
						 then hospitalMiles/38.0
						 else if (hospitalMiles > 5 ^ hospitalMiles <= 7)
						 then hospitalMiles/42.0
						 else if (hospitalMiles > 7 ^ hospitalMiles <= 12)
						 then hospitalMiles/40.0
						 else if (hospitalMiles > 12 ^ hospitalMiles <= 15)
						 then hospitalMiles/48.0
						 else if (hospitalMiles > 15 ^ hospitalMiles <= 17.5)
						 then hospitalMiles/56.0
						 else if (hospitalMiles > 17.5 ^ hospitalMiles <= 20)
						 then hospitalMiles/52.0
						 else if (hospitalMiles > 20 ^ hospitalMiles <= 25)
						 then hospitalMiles/50.0
						 else if (hospitalMiles > 25 ^ hospitalMiles <= 28.5)
						 then hospitalMiles/54.0
						 else if (hospitalMiles > 28.5 ^ hospitalMiles <= 41)
						 then hospitalMiles/49.0
						 else if (hospitalMiles > 41 ^ hospitalMiles <= 70)
						 then hospitalMiles/70.0
						 else if (hospitalMiles > 70 ^ hospitalMiles <= 500)
						 then hospitalMiles/70.0
						 else hospitalMiles/70.0;
							
		//not function of unit , only call
		transferMiles = if ( exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationTransfer(?ca) ] )
							then (sum_{?c:coordinate}[ abs[ currentCall(?c) - TransferPosition(?c) ] ])
							else 0.0;
		
		
		transferTravelTime = if (transferMiles <= 5) 
						 then transferMiles/38.0
						 else if (transferMiles > 5 ^ transferMiles <= 7)
						 then transferMiles/42.0
						 else if (transferMiles > 7 ^ transferMiles <= 12)
						 then transferMiles/40.0
						 else if (transferMiles > 12 ^ transferMiles <= 15)
						 then transferMiles/48.0
						 else if (transferMiles > 15 ^ transferMiles <= 17.5)
						 then transferMiles/56.0
						 else if (transferMiles > 17.5 ^ transferMiles <= 20)
						 then transferMiles/52.0
						 else if (transferMiles > 20 ^ transferMiles <= 25)
						 then transferMiles/50.0
						 else if (transferMiles > 25 ^ transferMiles <= 28.5)
						 then transferMiles/54.0
						 else if (transferMiles > 28.5 ^ transferMiles <= 41)
						 then transferMiles/49.0
						 else if (transferMiles > 41 ^ transferMiles <= 70)
						 then transferMiles/70.0
						 else if (transferMiles > 70 ^ transferMiles <= 500)
						 then transferMiles/70.0
						 else transferMiles/70.0;
				
		returnMiles(?u) = if (exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationHospital(?ca) ] ) 
						  then sum_{?c:coordinate}[ abs[ HospitalPosition(?c) - unitHome(?u,?c) ] ]
						  else if (exists_{?ca:cause}[ currentCallCode(?ca) ^ DestinationTransfer(?ca) ] )
						  then sum_{?c:coordinate}[ abs[ TransferPosition(?c) - unitHome(?u,?c) ] ]
						  else ( sum_{?c:coordinate}[ abs[ currentCall(?c) - unitHome(?u,?c) ] ] );
		
		returnTravelTime(?u) = if (returnMiles(?u) <= 5) 
						 then returnMiles(?u)/38.0
						 else if (returnMiles(?u) > 5 ^ returnMiles(?u) <= 7)
						 then returnMiles(?u)/42.0
						 else if (returnMiles(?u) > 7 ^ returnMiles(?u) <= 12)
						 then returnMiles(?u)/40.0
						 else if (returnMiles(?u) > 12 ^ returnMiles(?u) <= 15)
						 then returnMiles(?u)/48.0
						 else if (returnMiles(?u) > 15 ^ returnMiles(?u) <= 17.5)
						 then returnMiles(?u)/56.0
						 else if (returnMiles(?u) > 17.5 ^ returnMiles(?u) <= 20)
						 then returnMiles(?u)/52.0
						 else if (returnMiles(?u) > 20 ^ returnMiles(?u) <= 25)
						 then returnMiles(?u)/50.0
						 else if (returnMiles(?u) > 25 ^ returnMiles(?u) <= 28.5)
						 then returnMiles(?u)/54.0
						 else if (returnMiles(?u) > 28.5 ^ returnMiles(?u) <= 41)
						 then returnMiles(?u)/49.0
						 else if (returnMiles(?u) > 41 ^ returnMiles(?u) <= 70)
						 then returnMiles(?u)/70.0
						 else if (returnMiles(?u) > 70 ^ returnMiles(?u) <= 500)
						 then returnMiles(?u)/70.0
						 else returnMiles(?u)/70.0;
		
		firstResponse = min_{?u:unit}[ if (exists_{?r:role}[dispatch(?u,?r)])
						   then callTravelTime(?u) 
						   else (sum_{?c:coordinate}[MapUpperBound(?c)-MapLowerBound(?c)])/70.0 ];
						   //instead of 20mins
						   //using maximim dist / maximum speed = maximum possible callTravelTime
		
		fullResponse = abs[ max_{?u:unit}[ if (exists_{?r:role}[dispatch(?u,?r)])
							then callTravelTime(?u) 
							else -(sum_{?c:coordinate}[MapUpperBound(?c)-MapLowerBound(?c)])/70.0 ] ];//instead of 25 mins
							
		overwhelm = exists_{?r:role,?c:cause,?re:region}[ currentCallCode(?c) ^ currentCallRegion(?re) ^ (CauseRequirement(?c,?re,?r) > (sum_{?u:unit}[dispatch(?u,?r)])) ];
		
		timeServiceDone'(?u) = if (exists_{?r:role}[dispatch(?u,?r)]) 
						   then (currentCallTime + callTravelTime(?u) + (sum_{?r:role}[ if (dispatch(?u,?r)) then RoleServiceTime(?r) else 0.0])
								 + hospitalTravelTime + transferTravelTime)
						   else timeServiceDone(?u);
						
		timeTarryDone'(?u) = if (exists_{?r:role}[dispatch(?u,?r)])
					     then (currentCallTime + callTravelTime(?u) + (sum_{?r:role}[ if (dispatch(?u,?r)) then RoleServiceTime(?r) else 0.0]) + hospitalTravelTime  
								+ transferTravelTime + sum_{?r:role}[if (dispatch(?u,?r)) then TarryTime(?r) else 0.0] ) 
					     else timeTarryDone(?u);
						
		timeBackInBase'(?u) = if (exists_{?r:role}[dispatch(?u,?r)])
						  then (currentCallTime + callTravelTime(?u) + (sum_{?r:role}[ if (dispatch(?u,?r)) then RoleServiceTime(?r) else 0.0]) + hospitalTravelTime  
								+ transferTravelTime + sum_{?r:role}[if (dispatch(?u,?r)) then TarryTime(?r) else 0.0] +  returnTravelTime(?u))
						  else timeBackInBase(?u);
								  
		unitInService(?u) = unitInBase(?u) | unitOnSite(?u);
		
		unitInBase(?u) = (currentCallTime >= timeBackInBase(?u));
							//[(currentCallDay==dayBackInBase(?u)) ^ (currentCallTime >= timeBackInBase(?u))]
							//| (currentCallDay > dayBackInBase(?u));
		
		unitOnSite(?u) = (currentCallTime >= timeServiceDone(?u)) ^ (currentCallTime <= timeTarryDone(?u));
		
		
	};
	
	//when total overwhelm happens, it might be that all units are out.
	//This should be weighted lesser than total overwhelm when some unit is availble.
	
	//partial overwhelm = -W1*FR-W2*1+W3*(FR<=0.08)-W4 , FR > 0 ,FR < 1
	//total overwhelm = -1(W1+w2)-W4 
	//-W2-W4-W1*FR-W3*(FR<=0.08) < -W1-W2-W4
	//-W1*FR-(FR<=0.08)< -W1 
	//W1*(1-FR) < W3*(FR<=0.08)
	
	reward = [- (W1*firstResponse) - (W2*fullResponse) + W3*(firstResponse <= 0.0833 ) - W4*overwhelm];
	
	// if (overwhelm ^ (firstResponse == 1000)) 
	//		 then (-W4)
	//		 else [- (W1*firstResponse) - (W2*fullResponse) + W3*(firstResponse <= 0.0833 ) - W4*overwhelm];
	//total overwhelm gives 1000 for FR and FC, -1000(W1+W2)-W4 => -2100
	
	//reward = if (exists_{?u:unit}[dispatch(?u)]) then 1.0 else 0.0; 
	//if (exists_{?c:cause,?r:role,?re:region}[ currentCallCode(?c) ^ currentCallRegion(?re) ^ (causeRequirement(?c,?re,?r) > 0)])
	//		 then [- (W1*firstResponse) - (1 - W1)*fullResponse - W2*overwhelm]
	//		 else 0;
	//reward = (-firstResponse);
			 //if (exists_{?u:unit,?r:role}[dispatch(?u,?r)]) 
			 //then sum_{?u:unit}[ if (exists_{?r:role}[dispatch(?u,?r)]) then (-callTravelTime(?u)) else 0 ]
			 //else (-1000);
	
	state-invariants {
		forall_{?u:unit}[ timeTarryDone(?u) >= timeServiceDone(?u) ];
		forall_{?u:unit}[ timeBackInBase(?u) >= timeTarryDone(?u) ];
		forall_{?u:unit}[ (timeBackInBase(?u) >= 0) ];//^ (timeBackInBase(?u) < 24) ];
		forall_{?u:unit}[ (timeTarryDone(?u) >= 0) ];//^ (timeTarryDone(?u) < 24) ];
		forall_{?u:unit}[ (timeServiceDone(?u) >= 0) ];//^ (timeServiceDone(?u) < 24) ];
		
		forall_{?u:unit}[ callMiles(?u) >= 0 ];
		forall_{?u:unit}[ callTravelTime(?u) >= 0 ];
		forall_{?u:unit}[ callMiles(?u) <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]) ];
		
		forall_{?u:unit}[ hospitalMiles >= 0 ];
		forall_{?u:unit}[ hospitalTravelTime >= 0 ];
		forall_{?u:unit}[ hospitalMiles <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]) ];
		
		forall_{?u:unit}[ transferMiles >= 0 ];
		forall_{?u:unit}[ transferTravelTime >= 0 ];
		forall_{?u:unit}[ transferMiles <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]) ];
		
		forall_{?u:unit}[ returnMiles(?u) >= 0 ];
		forall_{?u:unit}[ returnTravelTime(?u) >= 0 ];
		forall_{?u:unit}[ returnMiles(?u) <= (sum_{?c:coordinate}[ MapUpperBound(?c)-MapLowerBound(?c) ]) ];
		
		forall_{?u:unit,?c:coordinate}[ lastUnitService(?u,?c) <= MapUpperBound(?c) ];
		forall_{?u:unit,?c:coordinate}[ lastUnitService(?u,?c) >= MapLowerBound(?c) ];
		forall_{?c:coordinate}[ currentCall(?c) <= MapUpperBound(?c) ];
		forall_{?c:coordinate}[ currentCall(?c) >= MapLowerBound(?c) ];
		
		currentCallTime >= 0; 
		
		forall_{?u:unit, ?c:coordinate}[ unitHome(?u,?c) <= MapUpperBound(?c) ];
		forall_{?u:unit, ?c:coordinate}[ unitHome(?u,?c) >= MapLowerBound(?c) ];
		
		(sum_{?c:cause}[currentCallCode(?c)]) == 1;
		tempUniformCause >= 0; tempUniformCause <= (sum_{?c:cause}[1]);
		
		forall_{?c:cause,?re:region,?r:role}[CauseRequirement(?c,?re,?r) >= 0];
		
		(sum_{?r:region}[currentCallRegion(?r)])==1;
		tempUniformRegion >= 0; tempUniformRegion <= (sum_{?r:region}[1]);
		
		forall_{?r:role}[ RoleServiceTime(?r) >= 0 ];
		forall_{?r:role}[ TarryTime(?r) >= 0 ];
		forall_{?ca:cause}[ DestinationHospital(?ca) + DestinationTransfer(?ca) <= 1 ];
		
		//for the current code and region and non zero requirement if an eligible unit exists then some unit must be dispatched for any role.
		//forall_{?ca:cause, ?re:region}[ 
		//	~currentCallCode(?ca) | ~currentCallRegion(?re)  
		//	| ~exists_{?u:unit,?ro:role}[ (causeRequirement(?ca,?re,?ro) > 0) ^ unitInService(?u) ^ HasCapability(?u,?ro) ]
		//	| ((sum_{?u:unit,?q:role}[ dispatch(?u,?q) ]) > 0) 
		//];
		
		//forall_{?ca:cause, ?re:region,?ro:role}[
			//~(currentCallCode(?ca) ^ currentCallRegion(?re)) | 
			//[ ~(causeRequirement(?ca,?re,?ro)>0) |
			//	[ ~( (sum_{?u:unit}[ unitInService(?u) ]) > 0 ) | 
			//	   ( (sum_{?u:unit}[ dispatch(?u,?ro) ]) > 0)
			//	]
			//] 
		//];
		
		//[currentCallCode(?ca) ^ currentCallRegion(?re) ^ (causeRequirement(?ca,?re,?ro)>0) 
		//		^ (exists_{?u:unit}[ HasCapability(?u,?ro) ^ unitInService(?u) ] ) ] 
		//	=> (firstResponse ~= 1000)
		//  => (sum_{?u:unit}[ dispatch(?u,?ro) ] > 0)
		
		
		//~exists_{?ca:cause,?re:region,?ro:role,?u:unit}[
		//	currentCallCode(?ca) ^ currentCallRegion(?re) ^ 
		//	(causeRequirement(?ca,?re,?ro) > 0) ^ 
		//	unitInService(?u) ^ HasCapability(?u,?ro) ] | (firstResponse ~= 1000);
		
		firstResponse >= 0.0; firstResponse <= (sum_{?c:coordinate}[MapUpperBound(?c)-MapLowerBound(?c)])/70.0;
		fullResponse >= 0.0; fullResponse <= (sum_{?c:coordinate}[MapUpperBound(?c)-MapLowerBound(?c)])/70.0;
		
		gapTime > 0;
		
	};
	
	action-preconditions {
		forall_{?u:unit,?r:role}[ (~dispatch(?u,?r)) | unitInService(?u) ];
		forall_{?u:unit}[(sum_{?r:role}[ dispatch(?u,?r) ]) <= 1];
		//(~unitInService) | dispatch;
		forall_{?u:unit,?r:role}[ ~dispatch(?u,?r) | HasCapability(?u,?r) ];
		forall_{?u:unit,?r:role}[ ~dispatch(?u,?r) | (exists_{?c:cause,?re:region}[ currentCallCode(?c) ^ currentCallRegion(?re) ^ (CauseRequirement(?c,?re,?r) > 0) ] ) ];
	    forall_{?ca:cause,?re:region}[ (~(currentCallCode(?ca) ^ currentCallRegion(?re)))  
			| (forall_{?ro:role}[ (sum_{?u:unit}[ dispatch(?u,?ro) ]) <= CauseRequirement(?ca,?re,?ro) ]) ];
		//for the current code and region and non zero requirement if an eligible unit exists then some unit must be dispatched for any role.
		
		//forall_{?ca:cause, ?re:region}[ 
		//	~currentCallCode(?ca) | ~currentCallRegion(?re)  
		//	| [(exists_{?u:unit,?ro:role}[ (causeRequirement(?ca,?re,?ro) > 0) ^ unitInService(?u) ^ HasCapability(?u,?ro) ]) 
		//	   <= (sum_{?u:unit,?q:role}[ dispatch(?u,?q) ])]
		//];
	};
}
		//currentCallDay : {state-fluent, int, default=1};
        //dayBackInBase(unit): {state-fluent, int, default=1};
        //dayServiceDone(unit) : {state-fluent, int, default=1};
		//dayTarryDone(unit) : {state-fluent, int, default=1};

		//derived fluents
		//sampledNextTime : {interm-fluent, real};
		
		//dayServiceDone'(?u) = if (dispatch(?u))
		//					  then (if (currentCallTime + callTravelTime(?u) + RoleServiceTime >= 24.0) 
		//						 then (currentCallDay+1)
		//						 else currentCallDay)
		//					  else dayServiceDone(?u);
		//dayTarryDone'(?u) = if (dispatch(?u))
		//					then (if (currentCallTime + callTravelTime(?u) + RoleServiceTime + TarryTime >= 24.0) 
		//						 then currentCallDay+1
		//						 else currentCallDay)
		//					  else dayTarryDone(?u);
		//dayBackInBase'(?u) = if (dispatch(?u))
		//					 then (if (currentCallTime + callTravelTime(?u) + RoleServiceTime + 
		//						TarryTime +  returnTravelTime(?u) >= 24.0) 
		//						 then currentCallDay+1
		//						 else currentCallDay)
		//					  else dayBackInBase(?u);
		//[((currentCallDay==dayServiceDone(?u)) ^ (currentCallTime >= timeServiceDone(?u))) | (currentCallDay > dayServiceDone(?u))] ^ 
		//[((currentCallDay==dayTarryDone(?u)) ^ (currentCallTime <= timeTarryDone(?u))) | (currentCallDay < dayServiceDone(?u))];
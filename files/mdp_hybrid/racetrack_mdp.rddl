domain racetrack_mdp {
 		
			types { 
				dummy : object;
			};
		
			pvariables {
 		
				x : {state-fluent, real, default = 0.5};
				y : {state-fluent, real, default = 0.5};
				
				v-x : {state-fluent, real, default = 0.0};
				v-y : {state-fluent, real, default = 0.0};
				
				collided : {state-fluent, bool, default = false};
				
				gas-x : {action-fluent, real, default = 0.0};
				gas-y : {action-fluent, real, default = 0.0};
				
				GOAL-X : {non-fluent, real, default = 5.0};
				GOAL-Y : {non-fluent, real, default = 9.0};
				
				ACTION-NOISE : {non-fluent, real, default = 0.0};
				MAX-GAS : {non-fluent, real, default = 0.71 };
				EPSILON : {non-fluent, real, default = 0.1};				

				//				
				OUTER-MAX-X : {non-fluent, real, default = 10.0};
				OUTER-MIN-X : {non-fluent, real, default = 0.0};
				OUTER-MAX-Y : {non-fluent, real, default = 10.0};
				OUTER-MIN-Y : {non-fluent, real, default = 0.0};
				
				INNER-MAX-X : {non-fluent, real, default = 8.0};
				INNER-MIN-X : {non-fluent, real, default = 0.0};
				INNER-MAX-Y : {non-fluent, real, default = 8.0};
				INNER-MIN-Y : {non-fluent, real, default = 2.0};
				//
				
				
				success : {interm-fluent, bool};
				
				crossed-inner-min-x : {interm-fluent, bool, level=1};
				crossed-inner-min-y : {interm-fluent, bool, level=1};
				crossed-inner-max-x : {interm-fluent, bool, level=1};
				crossed-inner-max-y : {interm-fluent, bool, level=1};
				
				collided-with-inner-min-x : {interm-fluent, bool, level=2};
				collided-with-inner-max-x : {interm-fluent, bool, level=2};
				collided-with-inner-min-y : {interm-fluent, bool, level=2};
				collided-with-inner-max-y : {interm-fluent, bool, level=2};
				
				collided-with-outer-min-x : {interm-fluent, bool, level=2};
				collided-with-outer-min-y : {interm-fluent, bool, level=2};
				collided-with-outer-max-x : {interm-fluent, bool, level=2};
				collided-with-outer-max-y : {interm-fluent, bool, level=2};
				
				in-the-pit : {interm-fluent, bool};
				
 			};
 		
		
			//three valued int 
			//random
			//gas perturbed by discrete quantities 
			//just do one point
			//but check collision of each point 
 			cpfs {
				//road is slippery - braking can fail
				//mud is sticky - no failure, gas has diminished effect of velocity
				
				x' = if (collided) then x else (x + v-x);
				y' = if (collided) then y else (y + v-y);
				success = Bernoulli( 1 - ACTION-NOISE );
				
				v-x' =  if (collided) then (0) else if ( ~collided ^ success ) then ( v-x + gas-x ) else v-x;
				v-y' = if (collided) then (0) else if ( ~collided ^ success ) then ( v-y + gas-y ) else v-y;
				
				collided' = collided | in-the-pit | collided-with-inner-min-x |  
								collided-with-inner-max-x | collided-with-inner-min-y | collided-with-inner-max-y |  		
									collided-with-outer-min-x | collided-with-outer-min-y | collided-with-outer-max-x | 
										collided-with-outer-max-y | 
										( ( crossed-inner-min-x + crossed-inner-min-y + crossed-inner-max-x 
											+ crossed-inner-max-y ) > 1.0 );
					
				//segment 1 (x1,y1) -> (x1+v-x,y1+v-y)
				//segment 2 (inner-min-x,inner-min-y) -> (inner-min-x,inner-max-y)
				//y-y1=(v-y/v-x)(x-x1)
				//does it intersect x=INNER-MIN-X
				//y-y1=(v-y/v-x)(INNER-MIN-X-x1)
				//bilinear cannot be encoded
				
				crossed-inner-min-x = [ ((x < INNER-MIN-X ) ^ (x + v-x > INNER-MIN-X + EPSILON )) 
										| ((x > INNER-MIN-X ) ^ (x + v-x < INNER-MIN-X - EPSILON)) ];
									  
									  
				crossed-inner-min-y = [ ((y < INNER-MIN-Y) ^ (y + v-y > INNER-MIN-Y + EPSILON))
														| ((y > INNER-MIN-Y) ^ (y + v-y < INNER-MIN-Y - EPSILON)) ];
									   
									   
				crossed-inner-max-x = [ ((x > INNER-MAX-X) ^ (x + v-x < INNER-MAX-X - EPSILON)) 
														| ((x < INNER-MAX-X) ^ (x + v-x > INNER-MAX-X + EPSILON)) ];
									 
				crossed-inner-max-y = [ ((y > INNER-MAX-Y) ^ (y + v-y < INNER-MAX-Y - EPSILON)) 
												| ((y < INNER-MAX-Y) ^ (y + v-y > INNER-MAX-Y + EPSILON)) ];
									  
				
				in-the-pit = [ ( ( (x > INNER-MIN-X) ^ (x < INNER-MAX-X) ) ^  ( (y > INNER-MIN-Y) ^ (y < INNER-MAX-Y) ) ) ]
								| [ ( ( (x + v-x > INNER-MIN-X) ^ (x + v-x < INNER-MAX-X) ) ^  ( (y + v-y > INNER-MIN-Y) ^ (y + v-y < INNER-MAX-Y) ) ) ]
								| [ ( ( (x > INNER-MIN-X) ^ (x < INNER-MAX-X) ) ^  ( (y + v-y > INNER-MIN-Y) ^ (y + v-y < INNER-MAX-Y) ) ) ]
								| [ ( ( (x + v-x > INNER-MIN-X) ^ (x + v-x < INNER-MAX-X) ) ^  ( (y > INNER-MIN-Y) ^ (y < INNER-MAX-Y) ) ) ];
						     
							 
				
				collided-with-inner-min-x = if ( crossed-inner-min-x  )
											then ~[ [ ((y < OUTER-MAX-Y ) ^ (y > INNER-MAX-Y )) | ((y > OUTER-MIN-Y) ^ (y < INNER-MIN-Y )) ] 
												^ [ ((y + v-y < OUTER-MAX-Y ) ^ (y + v-y > INNER-MAX-Y )) | ((y + v-y > OUTER-MIN-Y) ^ (y + v-y < INNER-MIN-Y )) ]  ]
											else false;
											
				collided-with-inner-max-x = if ( crossed-inner-max-x  )
											then ~[ [ ((y < OUTER-MAX-Y ) ^ (y > INNER-MAX-Y )) | ((y > OUTER-MIN-Y) ^ (y < INNER-MIN-Y )) ] 
												^ [ ((y + v-y < OUTER-MAX-Y ) ^ (y + v-y > INNER-MAX-Y )) | ((y + v-y > OUTER-MIN-Y) ^ (y + v-y < INNER-MIN-Y )) ]  ]  
											else false;
											
				collided-with-inner-min-y = if ( crossed-inner-min-y )
											then ~[ [ ((x < OUTER-MAX-X) ^ (x > INNER-MAX-X)) | ((x > OUTER-MIN-X) ^ (x < INNER-MIN-X)) ] 
												^ [ ((x + v-x < OUTER-MAX-X) ^ (x + v-x > INNER-MAX-X)) | ((x + v-x > OUTER-MIN-X) ^ (x + v-x < INNER-MIN-X)) ] ] 
											else false;
			
				collided-with-inner-max-y = if( crossed-inner-max-y )
											then ~[ [ ((x < OUTER-MAX-X) ^ (x > INNER-MAX-X)) | ((x > OUTER-MIN-X) ^ (x < INNER-MIN-X)) ]
												^ [ ((x + v-x < OUTER-MAX-X) ^ (x + v-x > INNER-MAX-X)) | ((x + v-x > OUTER-MIN-X) ^ (x + v-x < INNER-MIN-X)) ] ]
											else false;
											
				collided-with-outer-min-x = (x <= OUTER-MIN-X) | (x + v-x <= OUTER-MIN-X);
				collided-with-outer-min-y = (y <= OUTER-MIN-Y) | (y + v-y <= OUTER-MIN-Y);
				collided-with-outer-max-x = (x >= OUTER-MAX-X) | (x + v-x >= OUTER-MAX-X);
				collided-with-outer-max-y = (y >= OUTER-MAX-Y) | (y + v-y >= OUTER-MAX-Y);
				
 			};
 		
 			// 0 reward for reaching goal, -1 in all other cases
 			reward = - ( [ abs[ x - GOAL-X ] > 0.1 ] | [ abs[ y - GOAL-Y ] > 0.1 ] | collided );
			//- 400*collided ; 
			// + abs[ gas-x ] + abs[ gas-x ] ]) ;
			
			//if ( forall_{?p:poi}[ ( abs[ x(?p) - GOAL-X ] <= ARM-SIZE + 0.1 ) ^ ( abs[ y(?p) - GOAL-Y ] <= ARM-SIZE + 0.1 ) ] )  
			//		 then 0 -10000*collided - abs[ gas-x ] - abs[ gas-x ]
			//		 else -1 -10000*collided - abs[ gas-x ] - abs[ gas-x ];
			
 			state-invariants{ 
				//grid 
			//	x >= 0;
			//	y >= 0;
			//	MAX-X >= x;
			//	MIN-X <= x;
			//	MAX-Y >= y;
			//	MIN-Y <= y;
			//	
 			};
			
			action-preconditions{
				//bounded accelaration
				MAX-GAS >= gas-x;
				-MAX-GAS <= gas-x;
				MAX-GAS >= gas-y;
				-MAX-GAS <= gas-y;
				//abs[ gas-x ] >= MAX-GAS/10;
				//abs[ gas-y ] >= MAX-GAS/10;
			};	
 		
 		}
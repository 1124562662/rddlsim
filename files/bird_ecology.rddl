domain bird_conservation_continuous {

	types { 
		parcel : object;
		
	};
	
	pvariables {
		
		MIN-X(parcel) : { non-fluent, real, default = 0 };
		MAX-X(parcel) : { non-fluent, real, default = 0 };
		MIN-Y(parcel) : { non-fluent, real, default = 0 };
		MAX-Y(parcel) : { non-fluent, real, default = 0 };
		CENTERX(parcel) : { non-fluent, real, default = 0 };
		CENTERY(parcel) : { non-fluent, real, default = 0 };
		
		//assume each parcel has PWL dynamics
		conserved(parcel) : { state-fluent, bool, default = 0 };
		intensity(parcel) : { state-fluent, real, default = 0 };
			
		do-conserve(parcel) : { action-fluent, bool, default = false };
		
	};
	
	cpfs {
		conserved'(?p) = if ( do-conserve(?p) ) then true else conserved(?p);
		
		intensity'(?p) = if ( conserved(?p) ) 
						 then [ intensity(?p) + sum_{?p2:parcel}[  //rate term
							if (?p ~= ?p2) 
							then (1.0/(abs[ CENTERX(?p) - CENTERX(?p2) ] + abs[ CENTERY(?p) - CENTERY(?p2) ] ) ) * intensity(?p2)
							else 0 ] ] 
						 else 0;
	};
	
	//maximize area of bird spread
	reward = sum_{?p : parcel}[ [ (MAX-X(?p)-MIN-X(?p))*(MAX-Y(?p)-MIN-Y(?p)) ] * ( intensity(?p)/3 - do-conserve(?p) ) ];
	
	state-invariants {
		forall_{?p:parcel}[ MAX-X(?p) > MIN-X(?p) ];
		forall_{?p:parcel}[ MAX-Y(?p) > MIN-Y(?p) ];
		forall_{?p:parcel}[ CENTERX(?p) < MAX-X(?p) ];
		forall_{?p:parcel}[ CENTERY(?p) < MAX-Y(?p) ];
		forall_{?p:parcel}[ CENTERX(?p) > MIN-X(?p) ];
		forall_{?p:parcel}[ CENTERY(?p) > MIN-Y(?p) ];
	};
}

//(1.0/[ abs[ CENTERX(?p) - CENTERX(?p2) ] + abs[ CENTERY(?p) - CENTERY(?p2) ] ]) * intensity(?p2) ] ] else 0.0;
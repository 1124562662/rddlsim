domain spacecraft_control {

	types {
		ship : object;
	};
	
	pvariables { 
    	
		x(ship) : { state-fluent, real, default = 0 };
		y(ship) : { state-fluent, real, default = 0 };
		z(ship) : { state-fluent, real, default = 0 };
		v-x(ship) : { state-fluent, real, default = 0 };
		v-y(ship) : { state-fluent, real, default = 0 };
		v-z(ship) : { state-fluent, real, default = 0 };
		
		thruster-x(ship) : { action-fluent, real, default = 0 };
		thruster-y(ship) : { action-fluent, real, default = 0 };
		thruster-z(ship) : { action-fluent, real, default = 0 };
		
		a-x(ship) : { interm-fluent, real };
		a-y(ship) : { interm-fluent, real };
		a-z(ship) : { interm-fluent, real };
		
		M(ship) : { non-fluent, real, default = 1 };
		W(ship) : { non-fluent, real, default = 90 };
		
		GOAL-X(ship) : { non-fluent, real, default = 0 };
		GOAL-Y(ship) : { non-fluent, real, default = 0 };
		GOAL-Z(ship) : { non-fluent, real, default = 0.00018518518 };
		
		FUEL_COST : { non-fluent, real, default=-3 };
		GOAL_PENALTY : { non-fluent, real, default=-100 };
		
		SAFETY : { non-fluent, real, default = 1 };
		
	};
	
	cpfs {
		
		x'(?s) = x(?s) + v-x(?s);
		y'(?s) = y(?s) + v-y(?s);
		z'(?s) = z(?s) + v-z(?s);
		
		a-x(?s) = (3*W(?s)*W(?s)*x(?s))+(2*W(?s)*v-y(?s))+(thruster-x(?s)/M(?s));
		a-y(?s) = (-2*W(?s)*v-x(?s))+(thruster-y(?s)/M(?s));
		a-z(?s) = (-W(?s)*W(?s)*z(?s))+(thruster-z(?s)/M(?s));
		
		v-x'(?s) = v-x(?s)+a-x(?s);
		v-y'(?s) = v-y(?s)+a-y(?s);
		v-z'(?s) = v-z(?s)+a-z(?s);
		
	};
  
	reward = sum_{?s:ship}[ FUEL_COST*M(?s)*( abs[ thruster-x(?s) ] + abs[ thruster-y(?s) ] + abs[ thruster-z(?s) ] ) 
				- [ GOAL_PENALTY * [( GOAL-X(?s) == x(?s) ) ^ ( GOAL-Y(?s) == y(?s) ) ^ ( GOAL-Z(?s) == z(?s) )] ] ];
	
	action-preconditions {
		forall_{?s:ship}[ thruster-x(?s) >= 0 ];
		forall_{?s:ship}[ thruster-y(?s) >= 0 ];
		forall_{?s:ship}[ thruster-z(?s) >= 0 ]; 
	};
	
	state-invariants {
		forall_{?s:ship,?s2:ship}[ [ if ( ?s ~= ?s2 ) then abs[ x(?s)-x(?s2) ] else 10000.0 ] >= SAFETY ];
		forall_{?s:ship,?s2:ship}[ [ if ( ?s ~= ?s2 ) then abs[ y(?s)-y(?s2) ] else 10000.0 ] >= SAFETY ];
		forall_{?s:ship,?s2:ship}[ [ if ( ?s ~= ?s2 ) then abs[ z(?s)-z(?s2) ] else 10000.0 ] >= SAFETY ];
	};
}
 